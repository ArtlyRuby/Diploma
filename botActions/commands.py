from aiogram import types, Bot, Dispatcher, F
from aiogram.filters.command import Command
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from utils.keyboard_presets.keyboard_presets_user import UserKeyboardPreset
from botActions.user_services import TelegramUserService


class Handler:
    user_kb = UserKeyboardPreset()
    __user_service = TelegramUserService()

    def __init__(self, bot: Bot, dp: Dispatcher):
        self.bot = bot
        self.dp = dp
        self.register_handlers()
        self.dp.fsm_storage = MemoryStorage()


    def register_handlers(self):

        @self.dp.message(F.text, Command("start"))
        async def start_interaction(message: types.Message):
            try:
                user_id = message.from_user.id
                user_name = message.from_user.username
                first_name = message.from_user.first_name
                last_name = message.from_user.last_name

                await self.__user_service.create_user(user_id, user_name, first_name, last_name)

                await self.__user_service.create_cart(user_id)

                await message.answer(
                    "–ü—Ä–∏–≤–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω –º–µ–±–µ–ª–∏.\n"
                    "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –º–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏—Ö –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–Ω–µ!\n"
                    "–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ!",
                    reply_markup=self.user_kb.get_main_preset()
                )

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


        @self.dp.callback_query(F.data == "help")
        async def get_help_info(callback: types.CallbackQuery):
            try:
                await callback.answer("–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –º–µ–Ω—é –ø–æ–º–æ—â–∏")

                await callback.message.answer(text="–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å —Ç–µ–∫—Å—Ç, –Ω–æ –º–Ω–µ –ª–µ–Ω—å –ø–∏—Å–∞—Ç—å",
                                              reply_markup=self.user_kb.get_help_preset())

            except Exception as e:
                print(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏: {e}")


        @self.dp.message(F.text, Command("cart"))
        async def get_cart_items(message: types.Message):
            try:
                data = await self.__user_service.get_cart_items(message.from_user.id)

                await message.answer("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")

                await message.answer("–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:")

                summ_price = 0
                summ_quantity = 0
                for i in data:
                    await message.answer(text=f"–ò–º—è —Ç–æ–≤–∞—Ä–∞: {i["product_name"]}\n"
                                              f"–¶–µ–Ω–∞: {i["price"] * i["quantity"]}\n"
                                              f"–ö–æ–ª-–≤–æ: {i["quantity"]}",
                                         reply_markup=self.user_kb.get_cart_item_manage_preset(i['product_id']))
                    summ_price += i["price"] * i["quantity"]
                    summ_quantity += i["quantity"]

                await message.answer(f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã: {summ_price}\n"
                                     f"–û–±—â–µ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {summ_quantity}")

            except Exception as e:
                print(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤: {e}")


        @self.dp.callback_query(F.data == "go_main")
        async def handle_go_main(callback: types.CallbackQuery):
            try:
                await callback.answer("–û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")

                await callback.message.edit_reply_markup(
                    reply_markup=self.user_kb.get_main_preset()
                )

            except Exception as e:
                print(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")


        @self.dp.callback_query(F.data == "category_list")
        async def handle_get_category_list(callback: types.CallbackQuery):
            try:
                await callback.answer("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")

                await callback.message.answer("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")

                await callback.message.answer(
                    text="–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=self.user_kb.get_category_list_preset()
                )

            except Exception as e:
                print(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")


        async def get_category_items(callback: types.CallbackQuery, data):
            n = 1
            for i in data:
                await callback.message.answer(text=f"–¢–æ–≤–∞—Ä ‚Ññ{n}\n"
                                                   f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {i['name']}\n"
                                                   f"–û–ø–∏—Å–∞–Ω–∏–µ: {i['description']}\n"
                                                   f"–¶–µ–Ω–∞: {i['price']} —Å–æ–º\n"
                                                   f"–ê—Ä—Ç–∏–∫—É–ª: {i['sku']}",
                                              reply_markup=self.user_kb.get_add_to_cart_preset(i['product_id'])
                                              )
                n += 1


        @self.dp.callback_query(F.data.in_(["tables", 'chairs', 'beds', 'shelves']))
        async def handle_get_category_items(callback: types.CallbackQuery):
            try:
                await callback.answer("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤...")

                await callback.message.answer("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")

                category_hash = {
                    "tables": 1,
                    "chairs": 2,
                    "beds": 3,
                    "shelves": 4
                }

                # –î–æ—Å—Ç–∞—é —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ–ª–±–µ–∫–∞ –∏ —Å—Ä–∞–≤–Ω–∏—é —Å —Ö–µ—à–µ–º, –¥–∞–ª–µ–µ –ø–µ—Ä–µ–¥–∞—é –∫–∞–∫ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—é–¥–∞
                data = await self.__user_service.get_products_by_category_id(category_hash[callback.data])

                await get_category_items(callback, data)

                await callback.message.answer(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                                              reply_markup=self.user_kb.get_go_back_to_categories()
                                              )

            except Exception as e:
                print(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")


        @self.dp.message(StateFilter("waiting_for_quantity"))
        async def handle_quantity_input(message: types.Message,
                                        state: FSMContext):
            try:
                data = await state.get_data()
                product_id = data.get("product_id")
                callback_str = data.get("callback_str")
                product_name = data.get("product_name")

                await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

                quantity = int(message.text)

                if quantity <= 0 or quantity >= 100 or not isinstance(quantity, int):
                    await message.answer("üö´ –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0, –º–µ–Ω—å—à–µ 100 –∏–ª–∏ –±—ã—Ç—å —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º",
                                         reply_markup=self.user_kb.get_main_preset())
                    return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

                # –í–∞—à –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
                await self.__user_service.add_item_to_cart(
                    user_id=message.from_user.id,
                    product_id=product_id,
                    quantity=quantity
                )

                await message.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ ({product_name}) –≤ –∫–æ—Ä–∑–∏–Ω–µ: {quantity} —à—Ç.")

                await message.answer("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")

                if "from_category" in callback_str:
                    await message.answer(f"–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ—Ä–∑–∏–Ω—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                                         reply_markup=self.user_kb.get_category_list_preset())

                else:
                    await message.answer(f"–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ—Ä–∑–∏–Ω—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                                         reply_markup=self.user_kb.get_after_quantity_change_preset())

            except ValueError:
                await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ.\n"
                                     "–ü–µ—Ä–µ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫ —Å–ø–∏—Å–∫–∞–º —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É",
                                     reply_markup=self.user_kb.get_category_list_preset())


        @self.dp.callback_query(F.data.contains("add_to_cart_"))
        async def handle_add_to_cart(callback: types.CallbackQuery,
                                     state: FSMContext):
            try:
                await callback.answer("–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É...")

                product_id = int(callback.data.split("_")[-1])
                callback_str = callback.data
                product_name = await self.__user_service.get_product_name(product_id)

                await state.update_data(
                    product_id=product_id,
                    callback_str=callback_str,
                    product_name=product_name
                )

                await callback.message.answer(text="‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")

                await callback.message.answer(
                    f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ ({product_name}), –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É —á–∏—Å–ª–æ–º: ",
                    reply_markup=types.ReplyKeyboardRemove()
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                await state.set_state("waiting_for_quantity")

            except Exception as e:
                print(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É {e}")


        @self.dp.callback_query(F.data.contains("delete_cart_item_"))
        async def handle_delete_cart_item(callback: types.CallbackQuery):
            try:
                await callback.message.answer(text="‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")

                await callback.answer("–£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")

                product_id = int(callback.data.split("_")[-1])

                await self.__user_service.delete_cart_item(callback.from_user.id, product_id)

            except Exception as e:
                print(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")

            finally:
                await callback.message.answer(text="–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã. –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è - "
                                                   "–æ—Ç–∫—Ä–æ–π—Ç–µ –∫–æ—Ä–∑–∏–Ω—É —Å–Ω–æ–≤–∞",
                                              reply_markup=self.user_kb.get_after_quantity_change_preset())


        @self.dp.callback_query(F.data == "cart")
        async def handle_open_cart(callback: types.CallbackQuery):
            try:
                await callback.answer("–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É —Ç–æ–≤–∞—Ä–æ–≤")

                data = await self.__user_service.get_cart_items(callback.from_user.id)

                await callback.message.answer("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")

                await callback.message.answer("–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:")

                summ_price = 0
                summ_quantity = 0
                for i in data:
                    await callback.message.answer(text=f"–ò–º—è —Ç–æ–≤–∞—Ä–∞: {i["product_name"]}\n"
                                                       f"–¶–µ–Ω–∞: {i["price"] * i["quantity"]}\n"
                                                       f"–ö–æ–ª-–≤–æ: {i["quantity"]}",
                                                  reply_markup=self.user_kb.get_cart_item_manage_preset(i["product_id"]))
                    summ_price += i["price"] * i["quantity"]
                    summ_quantity += i["quantity"]

                await callback.message.answer(f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã: {summ_price}\n"
                                              f"–û–±—â–µ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {summ_quantity}",
                                              reply_markup=self.user_kb.get_place_order_preset())

            except Exception as e:
                print(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤: {e}")


        @self.dp.callback_query(F.data == "place_order")
        async def handle_place_order(callback: types.CallbackQuery):
            try:
                await callback.answer(text="–û–±—Ä–∞–±–æ—Ç–∫–∞")

                await callback.message.answer(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                              reply_markup=self.user_kb.get_confirm_payment_preset())

            except Exception as e:
                print(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")


        @self.dp.callback_query(F.data == "confirm_payment")
        async def handle_place_order_sequence(callback: types.CallbackQuery):
            try:
                await callback.answer(text="–û–∂–∏–¥–∞–µ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã")

                user_id = callback.from_user.id

                await self.__user_service.place_order_sequence(user_id)

                await callback.message.answer("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")

                await callback.message.answer(text="–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
                                              reply_markup=self.user_kb.get_main_preset())

            except Exception as e:
                print(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –û–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")


        @self.dp.callback_query(F.data == "search_by")
        async def handle_search_by(callback: types.CallbackQuery):
            try:
                await callback.answer(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞")

                await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞:",
                                              reply_markup=self.user_kb.get_search_preset())

            except Exception as e:
                print(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∏—Å–∫–∞: {e}")


        @self.dp.message(StateFilter("waiting_for_search"))
        async def handle_search_input(message: types.Message,
                                        state: FSMContext):
            try:
                data = message.text

                await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

                query_data = await self.__user_service.get_products_by_data(data)

                if len(query_data) == 0:
                    await message.answer(text="–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ",
                                         reply_markup=self.user_kb.get_search_preset())

                else:
                    for i in query_data:
                        await message.answer(text=f"–ò–º—è —Ç–æ–≤–∞—Ä–∞: {i["name"]}\n"
                                                  f"–û–ø–∏—Å–∞–Ω–∏–µ: {i["description"]}\n"
                                                  f"–¶–µ–Ω–∞: {i["price"]}\n"
                                                  f"–ê—Ä—Ç–∏–∫—É–ª: {i["sku"]}",
                                             reply_markup=self.user_kb.get_add_to_cart_preset(i["product_id"])
                                             )

                    await message.answer(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É:",
                                         reply_markup=self.user_kb.get_search_preset())

            except Exception as e:
                print(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∏—Å–∫–∞: {e}")


        @self.dp.callback_query(F.data.contains("search_by_"))
        async def handle_search_by(callback: types.CallbackQuery,
                                   state: FSMContext):
            try:
                await callback.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–∏—Å–∫–∞")

                if "name" in callback.data:
                    await callback.message.answer(
                        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä",
                        reply_markup=types.ReplyKeyboardRemove()
                    )

                else:
                    await callback.message.answer(
                        f"–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª (—á–∏—Å–ª–æ–º), –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä",
                        reply_markup=types.ReplyKeyboardRemove()
                    )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                await state.set_state("waiting_for_search")

            except Exception as e:
                print(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞: {e}")

